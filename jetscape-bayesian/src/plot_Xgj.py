import getopt
import sys
import numpy as np
import matplotlib.pyplot as plt

def usage():
    print 'python script to plot ratio of jet to gamma energy from pythia-trento'
    print 'Usage: python boxnratio_plot.py [options]'
    print '   -h, --help      : this message'
    print '   -v, --verbose   : print diagnostic information'

    
def main():

#   Parse command line and set defaults (see http://docs.python.org/library/getopt.html)
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hv', \
              ['help','verbose'])
    except getopt.GetoptError, err:
        print str(err) # will print something like 'option -a not recognized'
        usage()
        sys.exit(2)

# Set some default values, can be made adjustable later
    verbose = False
    mytitle = 'AuAu 200GeV, Minimum Bias Trigger'
    files = ['../../../data/gjet2025_trento200_SJ10p1_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p2_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p3_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p4_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p5_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p6_10k.txt',
             '../../../data/gjet2025_trento200_SJ10p7_10k.txt']

    # mytitle = 'AuAu 200GeV, 0-10% Centrality'
    # files = ['../../../data/gjet2025_trento200_0s10_SJ10p1_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p2_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p3_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p4_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p5_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p6_10k.txt',
    #          '../../../data/gjet2025_trento200_0s10_SJ10p7_10k.txt']
    labels    = ['R=0.1','R=0.2','R=0.3','R=0.4','R=0.5','R=0.6','R=0.7']
    formats   = ['bs-','ro-','gh-','r8-','mp-','g^-','rv-','m>-','k*-']
    
    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
            sys.exit()
        elif o in ('-r', '--read'):
            verbose = True
        else:
            assert False, 'unhandled option'

#   Read in and plot files one at a time.
#   Files generated by output_pythia_trento.py
#   Format = m pT eta phi q pT eta phi quench   iev b Np mult e2   pT1 Njet N(pt,eta,phi)
#   Extract the first two jet pT values from the last entry

    i = 0
    for file in files:
        print 'Reading', file
        data = np.genfromtxt(file)
        xgj  = data[:,2]
        
        hist,edges = np.histogram(xgj,24,(0.,1.2))
        cent = edges[:-1]+(edges[1]-edges[0])/2.
        herr = hist**0.5
        sum = np.sum(hist)

        if verbose:
            print hist.size, hist
            print cent.size, cent
        
        plt.figure(1)
        plt.xlabel('X_gj')
        plt.ylabel('Events')
        plt.errorbar(cent,hist,yerr=herr,fmt=formats[i],label=labels[i])
        i+= 1

    plt.title(mytitle)
    plt.legend(loc='upper center')
#    plt.yscale('log')
    plt.show(block=False)
    pdffile = raw_input("<CR> to exit, [file].pdf to save figure: ")
    if (pdffile):
        plt.savefig(pdffile)            

if __name__=='__main__':main()



